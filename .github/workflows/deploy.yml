name: Deploy test-api

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      APP_NAME: test-api
      APP_PORT: 8080

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # JAR 업로드: build/libs 경로를 잘라 app/ 바로 아래에 두기
      - name: Upload JARs to server
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "build/libs/*.jar"
          target: "/home/${{ secrets.SERVER_USER }}/app/"
          strip_components: 2
          overwrite: true

      - name: Stop existing app (if any)
        uses: appleboy/ssh-action@v1
        env:
          APP_NAME: ${{ env.APP_NAME }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          envs: APP_NAME
          command_timeout: 10m
          script: |
            bash -lc '
              set -Eeuo pipefail
              APP_DIR="/home/${{ secrets.SERVER_USER }}/app"
              JAR_NAME="${APP_NAME}.jar"

              PIDS="$(pgrep -f "java .*${JAR_NAME}" || true)"
              if [ -z "$PIDS" ]; then
                echo "실행 중인 프로세스 없음."
                exit 0
              fi

              echo "기존 프로세스 종료..."
              kill $PIDS || true
              for i in $(seq 1 15); do pgrep -f "java .*${JAR_NAME}" >/dev/null || break; sleep 1; done
              pgrep -f "java .*${JAR_NAME}" >/dev/null && { echo "SIGKILL..."; kill -9 $PIDS || true; }
              echo "정지 완료"
            '

      - name: Start app and port healthcheck (127.0.0.1:8080)
        uses: appleboy/ssh-action@v1
        env:
          APP_NAME: ${{ env.APP_NAME }}
          APP_PORT: ${{ env.APP_PORT }}
          DB_CONFIG_JSON: ${{ secrets.DB_CONFIG_JSON }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          envs: APP_NAME,APP_PORT,DB_CONFIG_JSON
          command_timeout: 20m
          script: |
            bash -lc '
              set -Eeuo pipefail
              APP_DIR="/home/${{ secrets.SERVER_USER }}/app"
              JAR_NAME="${APP_NAME}.jar"
              LOG_FILE="$APP_DIR/app.log"

              mkdir -p "$APP_DIR"
              echo "== app 디렉터리 =="
              ls -lh "$APP_DIR" || true
              echo "== JAR 목록 (app 바로 아래) =="
              ls -lh "$APP_DIR"/*.jar || true

              # 최신 JAR 중 -plain 제외
              CANDIDATE="$(ls -t "$APP_DIR"/*.jar 2>/dev/null | grep -v -- "-plain\.jar$" | head -n1 || true)"
              if [ -z "$CANDIDATE" ]; then
                echo "❌ 실행가능 JAR(bootJar)을 찾지 못했습니다. 업로드 위치를 확인하세요."
                exit 1
              fi

              # 충돌 방지: 같은 이름의 디렉터리가 있으면 제거
              if [ -d "$APP_DIR/$JAR_NAME" ]; then
                echo "⚠️ $APP_DIR/$JAR_NAME 가 디렉터리입니다. 제거합니다."
                rm -rf "$APP_DIR/$JAR_NAME"
              fi

              # 무결성/실행가능 점검
              if ! file "$CANDIDATE" | grep -qi "zip archive"; then
                echo "❌ 손상 의심 JAR: $(file "$CANDIDATE")"
                exit 1
              fi
              if command -v jar >/dev/null 2>&1; then
                jar tf "$CANDIDATE" | grep -q "^BOOT-INF/" || { echo "❌ BOOT-INF 미검출 → plain JAR"; exit 1; }
              elif command -v unzip >/dev/null 2>&1; then
                unzip -l "$CANDIDATE" | grep -q "BOOT-INF/" || { echo "❌ BOOT-INF 미검출 → plain JAR"; exit 1; }
              else
                echo "⚠️ jar/unzip 없음. 무결성 최소 확인만 진행합니다."
              fi

              cp -f "$CANDIDATE" "$APP_DIR/$JAR_NAME"

              echo "애플리케이션 시작..."
              nohup java -jar "$APP_DIR/$JAR_NAME" --spring.profiles.active=prod > "$LOG_FILE" 2>&1 &

              echo "포트 오픈 대기..."
              for i in $(seq 1 30); do
                ss -ltn 2>/dev/null | awk "{print \$4}" | grep -q ":${APP_PORT}$" && break
                if command -v netstat >/dev/null 2>&1 && netstat -ltn 2>/dev/null | awk "{print \$4}" | grep -q ":${APP_PORT}$"; then
                  break
                fi
                sleep 2
              done

              # 127.0.0.1:${APP_PORT} 연결만 확인(응답코드 무관)
              echo "127.0.0.1:${APP_PORT} 연결 확인..."
              ok=""
              for i in $(seq 1 20); do
                if curl -s -m 2 -o /dev/null "http://127.0.0.1:${APP_PORT}"; then
                  ok=1; break
                fi
                sleep 2
              done

              if [ -z "$ok" ]; then
                echo "❌ 127.0.0.1:${APP_PORT} 연결 실패. 최근 로그:"
                tail -n 200 "$LOG_FILE" || true
                exit 1
              fi

              echo "✅ 포트 ${APP_PORT} 연결 OK"
            '

      - name: Print server logs on failure
        if: failure()
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            bash -lc '
              APP_DIR="/home/${{ secrets.SERVER_USER }}/app"
              LOG_FILE="$APP_DIR/app.log"
              echo "== app 디렉터리 =="
              ls -lh "$APP_DIR" || true
              echo "== JARs (app/) =="
              ls -lh "$APP_DIR"/*.jar || true
              echo "== file =="
              file "$APP_DIR"/*.jar || true
              echo "== tail log =="
              tail -n 400 "$LOG_FILE" || echo "log file not found"
            '
