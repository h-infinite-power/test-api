name: Deploy reportly-api

on:
  push:
    branches: [ main ]

jobs:
  build:
    name: reportly-api build & deploy
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      APP_NAME: reportly-api   # <- 여기만 바꾸면 JAR/URL 전부 따라 바뀜

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # JAR 업로드
      - name: Upload JAR to server
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "build/libs/*.jar"
          target: "/home/${{ secrets.SERVER_USER }}/app/"
          strip_components: 2
          overwrite: true

      # 1) 서버에서 기존 프로세스 정지
      - name: Stop existing app (if any)
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          command_timeout: 15m
          script: |
            bash -lc '
              set -Eeuo pipefail

              APP_DIR="/home/${{ secrets.SERVER_USER }}/app"
              JAR_NAME="${APP_NAME}.jar"

              mkdir -p "$APP_DIR"

              # 자바로 실행된 해당 JAR 프로세스만 타겟팅 (bash 자기자신 매치 방지)
              PIDS="$(pgrep -f "java .*${JAR_NAME}" || true)"
              if [ -z "$PIDS" ]; then
                echo "실행 중인 프로세스 없음."
                exit 0
              fi

              echo "기존 프로세스 종료 중..."
              kill $PIDS || true

              # TERM으로 최대 15초 기다림
              for i in $(seq 1 15); do
                if ! pgrep -f "java .*${JAR_NAME}" >/dev/null 2>&1; then
                  break
                fi
                sleep 1
              done

              if pgrep -f "java .*${JAR_NAME}" >/dev/null 2>&1; then
                echo "강제 종료(SIGKILL) 시도..."
                kill -9 $PIDS || true
              fi

              echo "정지 완료"
            '

      # 2) 시작 + 헬스체크
      - name: Start app and health check
        uses: appleboy/ssh-action@v1
        env:
          DB_CONFIG_JSON: ${{ secrets.DB_CONFIG_JSON }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          envs: DB_CONFIG_JSON
          command_timeout: 15m
          script: |
            bash -lc '
              set -Eeuo pipefail

              APP_DIR="/home/${{ secrets.SERVER_USER }}/app"
              JAR_NAME="${APP_NAME}.jar"
              PID_FILE="$APP_DIR/${JAR_NAME}.pid"
              LOG_FILE="$APP_DIR/app.log"

              mkdir -p "$APP_DIR"

              LATEST_JAR=$(ls -t "$APP_DIR"/*.jar 2>/dev/null | head -n1 || true)
              if [ -z "$LATEST_JAR" ]; then
                echo "❌ JAR 파일을 찾을 수 없습니다: $APP_DIR"
                exit 1
              fi
              cp -f "$LATEST_JAR" "$APP_DIR/$JAR_NAME"

              echo "애플리케이션 시작..."
              nohup java -jar "$APP_DIR/$JAR_NAME" --spring.profiles.active=prod > "$LOG_FILE" 2>&1 &
              echo $! > "$PID_FILE"

              echo "헬스체크 시작..."
              # 필요 시 URL 수정: /${APP_NAME}/health 경로를 쓰지 않는다면 아래 줄만 바꾸세요.
              for i in $(seq 1 10); do
                if curl -fsS "https://h-infinite-power.store/${APP_NAME}/health" >/dev/null; then
                  echo "✅ 애플리케이션이 정상적으로 시작되었습니다."
                  exit 0
                fi
                echo "헬스체크 실패, 재시도 중... ($i/10)"
                sleep 10
              done

              echo "❌ 애플리케이션 시작 실패"
              echo "---- last 200 lines of app.log ----"
              tail -n 200 "$LOG_FILE" || true
              exit 1
            '

      # 실패 시 서버 로그 출력
      - name: Print server logs on failure
        if: failure()
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            bash -lc '
              LOG_FILE="/home/${{ secrets.SERVER_USER }}/app/app.log"
              echo "---- last 400 lines of app.log ----"
              tail -n 400 "$LOG_FILE" || echo "log file not found"
            '
